# EPC Final Merger for Cleaned/Merged Files
# Combines cleaned Excel files that already contain EPC, Reader, Location columns

import pandas as pd
import os
from pathlib import Path
import tkinter as tk
from tkinter import filedialog, simpledialog, messagebox
from datetime import datetime

def select_excel_files():
    root = tk.Tk()
    root.withdraw()
    file_paths = filedialog.askopenfilenames(
        title="Select Merged EPC Excel Files",
        filetypes=[("Excel Files", "*.xlsx *.xls")]
    )
    return list(file_paths)

def merge_cleaned_files(files):
    # Ask for EPC prefix filters
    root = tk.Tk()
    root.withdraw()
    prefix_filters = []
    while True:
        prefix = simpledialog.askstring(
            "Filter EPCs", 
            "Enter EPC prefix(es) to include (e.g. 01, 03).\nPress Enter without typing to finish."
        )
        if prefix:
            parts = [p.strip() for p in prefix.split(",") if p.strip()]
            prefix_filters.extend(parts)
        else:
            break

    # Ask for EPC character limit
    char_limit = simpledialog.askinteger(
        "Truncate EPCs",
        "Enter number of characters to keep from each EPC (e.g. 24).\nLeave blank to use full EPCs:"
    )

    dfs = []
    for file in files:
        try:
            df = pd.read_excel(file)
            if "EPC" not in df.columns:
                print(f"❌ Skipping {file} — no EPC column found.")
                continue

            df["EPC"] = df["EPC"].astype(str)

            # ✅ Shorten EPCs if they are too long
            if char_limit:
                df["EPC"] = df["EPC"].apply(
                    lambda x: x[:char_limit] if len(x) > char_limit else x
                )

            # Filter by prefixes if provided
            if prefix_filters:
                df = df[df["EPC"].str.startswith(tuple(prefix_filters))]

            dfs.append(df)
            print(f"✅ Loaded: {file} ({len(df)} rows after filtering)")
        except Exception as e:
            print(f"❌ Error reading {file}: {e}")

    if not dfs:
        print("❌ No valid files to merge.")
        return

    combined = pd.concat(dfs, ignore_index=True)
    combined = combined.sort_values("EPC")

    # Combine unique Locations and Readers per EPC
    if "Location" in combined.columns:
        combined["Location"] = combined.groupby("EPC")["Location"].transform(
            lambda x: ', '.join(sorted(set(x)))
        )

    if "Reader" in combined.columns:
        combined["Reader"] = combined.groupby("EPC")["Reader"].transform(
            lambda x: ', '.join(sorted(set(x)))
        )

    combined = combined.drop_duplicates(subset="EPC")

    # Ask for output file name
    root = tk.Tk()
    root.withdraw()
    os.makedirs("merged_final", exist_ok=True)
    default_name = f"Final_Merged_EPCs_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
    output_name = simpledialog.askstring(
        "Save As",
        "Enter name for final merged file:",
        initialvalue=default_name
    )

    if output_name:
        save_path = os.path.join("merged_final", f"{output_name}.xlsx")
        combined.to_excel(save_path, index=False)

        # Auto-adjust column widths
        import openpyxl
        from openpyxl.utils import get_column_letter

        wb = openpyxl.load_workbook(save_path)
        ws = wb.active

        for col in ws.columns:
            max_length = 0
            column = col[0].column  # 1-based index
            for cell in col:
                try:
                    if cell.value:
                        max_length = max(max_length, len(str(cell.value)))
                except:
                    pass
            ws.column_dimensions[get_column_letter(column)].width = max_length + 2

        wb.save(save_path)
        print(f"✅ Final merged file saved to: {save_path}")

    else:
        print("❌ Save cancelled.")

if __name__ == "__main__":
    selected_files = select_excel_files()
    if selected_files:
        merge_cleaned_files(selected_files)
    else:
        print("❌ No files selected.")
